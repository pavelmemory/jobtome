// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package shorten is a generated GoMock package.
package shorten

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	storage "github.com/pavelmemory/jobtome/internal/storage"
	shorten "github.com/pavelmemory/jobtome/internal/storage/shorten"
)

// MockTransactioner is a mock of Transactioner interface
type MockTransactioner struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionerMockRecorder
}

// MockTransactionerMockRecorder is the mock recorder for MockTransactioner
type MockTransactionerMockRecorder struct {
	mock *MockTransactioner
}

// NewMockTransactioner creates a new mock instance
func NewMockTransactioner(ctrl *gomock.Controller) *MockTransactioner {
	mock := &MockTransactioner{ctrl: ctrl}
	mock.recorder = &MockTransactionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactioner) EXPECT() *MockTransactionerMockRecorder {
	return m.recorder
}

// WithTx mocks base method
func (m *MockTransactioner) WithTx(arg0 context.Context, arg1 func(storage.Runner) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx
func (mr *MockTransactionerMockRecorder) WithTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockTransactioner)(nil).WithTx), arg0, arg1)
}

// WithoutTx mocks base method
func (m *MockTransactioner) WithoutTx(arg0 context.Context, arg1 func(storage.Runner) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithoutTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithoutTx indicates an expected call of WithoutTx
func (mr *MockTransactionerMockRecorder) WithoutTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithoutTx", reflect.TypeOf((*MockTransactioner)(nil).WithoutTx), arg0, arg1)
}

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Persist mocks base method
func (m *MockStorage) Persist(ctx context.Context, run storage.Runner, shorten shorten.Entity) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", ctx, run, shorten)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Persist indicates an expected call of Persist
func (mr *MockStorageMockRecorder) Persist(ctx, run, shorten interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockStorage)(nil).Persist), ctx, run, shorten)
}

// Retrieve mocks base method
func (m *MockStorage) Retrieve(ctx context.Context, run storage.Runner, id int64) (shorten.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", ctx, run, id)
	ret0, _ := ret[0].(shorten.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockStorageMockRecorder) Retrieve(ctx, run, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockStorage)(nil).Retrieve), ctx, run, id)
}

// List mocks base method
func (m *MockStorage) List(ctx context.Context, run storage.Runner, pager shorten.Pager) ([]shorten.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, run, pager)
	ret0, _ := ret[0].([]shorten.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStorageMockRecorder) List(ctx, run, pager interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorage)(nil).List), ctx, run, pager)
}

// Delete mocks base method
func (m *MockStorage) Delete(ctx context.Context, runner storage.Runner, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, runner, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageMockRecorder) Delete(ctx, runner, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), ctx, runner, id)
}

// ByHash mocks base method
func (m *MockStorage) ByHash(ctx context.Context, runner storage.Runner, hash string) (shorten.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByHash", ctx, runner, hash)
	ret0, _ := ret[0].(shorten.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByHash indicates an expected call of ByHash
func (mr *MockStorageMockRecorder) ByHash(ctx, runner, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByHash", reflect.TypeOf((*MockStorage)(nil).ByHash), ctx, runner, hash)
}
